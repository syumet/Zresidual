mf_nc_new<- ncol (mf_new)
mm_new<-model.matrix(fit_coxph$formula,newdata)
fix_var_new<-mm_new[,-1,drop=FALSE]
explp_new<-exp(fix_var_new %*% fit_coxph$coefficients)
Y_new <- mf_new[[1]]
if(!inherits(Y_new, "Surv")) stop("left hand side not a survival object")
if(ncol(Y_new) != 3) {
# making it all in (tstart, tstop) format
Y_new <- Surv(rep(0, nrow(Y_new)), Y_new[,1], Y_new[,2])
}
H0_new<-f(Y_new[,2])
#Survival Function
SP<- exp(-as.vector(explp_new)*H0_new)
censored <- which(Y_new[,3]==0)
n.censored <- length(censored)
#Z-residual
RSP <- SP
RSP[censored] <- RSP[censored]*runif(n.censored)
Zresid <- -qnorm(RSP)
#Normalized unmodified SPs
USP<-SP
USP[USP==1] <- .999999999
censored.Zresid<- -qnorm(USP)
# Unmodified CS residual
ucs<- -log(SP)
# Modified CS residual
MSP<- SP
MSP[censored] <- SP[censored]/exp(1)
mcs <- -log(MSP)
#Normalized MSPs
MSP<- SP
MSP[censored] <- SP[censored]/exp(1)
nmsp<- -qnorm(MSP)
#Martingale Residual
martg<- Y_new[,3] - ucs
#Deviance Residual
dev<- sign(martg)* sqrt((-2)*(martg+Y_new[,3]*log(Y_new[,3]-martg)))
list(Zresid=Zresid,censored.Zresid=censored.Zresid,SP=SP,
ucs=ucs,mcs=mcs,martg=martg,dev=dev)
}
set.seed(1)
rexp2 <- function(n, rate){ if (rate==0) rep(Inf,n) else rexp(n=n, rate = rate)}
simulated_data<- function(n,beta0 , beta1 ,beta2, alpha, mean.censor)
{
x <- rbinom(n, size = 1, p = 0.5)
x2<- rnorm(n,0,1)
t0<- rexp2(n, rate= 1/mean.censor)
survreg_sim_data <- rsurvreg( n, mean = beta0 + beta1 * x +beta2*x2 ,
scale=1/alpha, distribution='weibull')
t <- pmin(survreg_sim_data, t0)
d <- as.numeric(t0>= survreg_sim_data )
x<-as.factor(x)
data_form<- data.frame(survreg_sim_data,t0,t,d,x,x2)
out_r<-list(data_form=data_form, alpha=alpha, beta0=beta0, beta1=beta1,beta2=beta2)
return (out_r)
}
library("foreach")
library("survival")
n<-50
beta0<-2
beta1<-1
beta2<-2
alpha<-1.7
mean.censor<-14
#nrep is preset to a number
# simulating a dataset
out_r<- simulated_data(n=n,beta0=beta0,beta1=beta1,beta2 = beta2,
alpha=alpha, mean.censor=mean.censor)
data<-out_r$data_form
simulated_data_random<-out_r$data_form
#checking censoring rate
table(simulated_data_random$d)
fit2<-coxph(Surv(t,d) ~ x+x2, data=simulated_data_random)
zresid<-Zresidual.coxph(fit_coxph = fit2,newdata = simulated_data_random)
library(Zresidual)
force(Zresidual)
View(Zresidual)
Zresidual(fit_object=fit_coxph,data=simulated_shared_frailty_data)
set.seed(1)
rexp2 <- function(n, rate){ if (rate==0) rep(Inf,n) else rexp(n=n, rate = rate)}
simulated_data<- function(n,beta0 , beta1 ,beta2, alpha, mean.censor)
{
x <- rbinom(n, size = 1, p = 0.5)
x2<- rnorm(n,0,1)
t0<- rexp2(n, rate= 1/mean.censor)
survreg_sim_data <- rsurvreg( n, mean = beta0 + beta1 * x +beta2*x2 ,
scale=1/alpha, distribution='weibull')
t <- pmin(survreg_sim_data, t0)
d <- as.numeric(t0>= survreg_sim_data )
x<-as.factor(x)
data_form<- data.frame(survreg_sim_data,t0,t,d,x,x2)
out_r<-list(data_form=data_form, alpha=alpha, beta0=beta0, beta1=beta1,beta2=beta2)
return (out_r)
}
library("foreach")
library("survival")
n<-50
beta0<-2
beta1<-1
beta2<-2
alpha<-1.7
mean.censor<-14
# simulating a dataset
out_r<- simulated_data(n=n,beta0=beta0,beta1=beta1,beta2 = beta2,
alpha=alpha, mean.censor=mean.censor)
data<-out_r$data_form
simulated_data_random<-out_r$data_form
#checking censoring rate
table(simulated_data_random$d)
fit2<-coxph(Surv(t,d) ~ x+x2, data=simulated_data_random)
Zresidual(fit_object=fit_coxph,data=simulated_shared_frailty_data)
Zresidual(fit_object=fit2,data=simulated_data_random)
View(Zresidual)
library(Zresidual)
library(Zresidual)
library(Zresidual)
set.seed(1)
rexp2 <- function(n, rate){ if (rate==0) rep(Inf,n) else rexp(n=n, rate = rate)}
simulated_data<- function(n,beta0 , beta1 ,beta2, alpha, mean.censor)
{
x <- rbinom(n, size = 1, p = 0.5)
x2<- rnorm(n,0,1)
t0<- rexp2(n, rate= 1/mean.censor)
survreg_sim_data <- rsurvreg( n, mean = beta0 + beta1 * x +beta2*x2 ,
scale=1/alpha, distribution='weibull')
t <- pmin(survreg_sim_data, t0)
d <- as.numeric(t0>= survreg_sim_data )
x<-as.factor(x)
data_form<- data.frame(survreg_sim_data,t0,t,d,x,x2)
out_r<-list(data_form=data_form, alpha=alpha, beta0=beta0, beta1=beta1,beta2=beta2)
return (out_r)
}
library("foreach")
library("survival")
n<-50
beta0<-2
beta1<-1
beta2<-2
alpha<-1.7
mean.censor<-14
# simulating a dataset
out_r<- simulated_data(n=n,beta0=beta0,beta1=beta1,beta2 = beta2,
alpha=alpha, mean.censor=mean.censor)
data<-out_r$data_form
simulated_data_random<-out_r$data_form
#checking censoring rate
table(simulated_data_random$d)
fit2<-coxph(Surv(t,d) ~ x+x2, data=simulated_data_random)
Zresidual(fit_object=fit2,data=simulated_data_random)
Zresidual(fit.object=fit2,data=simulated_data_random)
allresid<-Zresidual(fit.object=fit2,data=simulated_data_random)
qqnorm.zresid(allresid$Zresid)
sw.test.zresid(allresid$Zresid)
sf.test.zresid(allresid$Zresid)
library(Zresidual)
sf.test.zresid(allresid$Zresid)
sf.test.zresid(allresid$Zresid)
library(Zresidual)
sf.test.zresid(allresid$Zresid)
library(Zresidual)
library(Zresidual)
gof.censore.zresid(allresid$censored.Zresid,censored = simulated_data_random$d)
library(Zresidual)
gof.censore.zresid(allresid$censored.Zresid,censored = simulated_data_random$d)
anov.test.zresid(allresid$Zresid,simulated_data_random$x2)
anov.test.zresid(allresid$Zresid,simulated_data_random$x2,10)
anov.test.zresid(allresid$Zresid,simulated_data_random$x1,10)
bartlett.test.zresid(allresid$Zresid,simulated_data_random$x1,10)
bartlett.test.zresid(allresid$Zresid,simulated_data_random$x2,10)
anov.test.zresid(allresid$Zresid,simulated_data_random$x2)
plot.zresid(allresid$Zresid)
test.nl.aov <- function(Zresidual, fitted.values, k.anova=10)
{
if(is.factor(fitted.values)){
lpred.bin <- fitted.values
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
}
if(!is.factor(fitted.values)){
lpred.bin <- cut(fitted.values, k.anova)
less2_factor<-which(tapply(lpred.bin,lpred.bin,length)<= 2)
if(rlang::is_empty(names(less2_factor))){
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
}else{
list_less2_factor<-list()
for(j in 1:length(less2_factor)){
list_less2_factor[[j]]<-which(lpred.bin==names(less2_factor[j]))
}
vector<-vector()
vector_less2_factor<-as.vector(sapply(list_less2_factor, append,vector))
new.lpred.bin<- lpred.bin[-vector_less2_factor]
new.Zresidual<-Zresidual[-vector_less2_factor]
anova(lm(new.Zresidual ~ new.lpred.bin))$`Pr(>F)`[1]
}
}
}
test.nl.aov(allresid$Zresid,simulated_data_random$x2)
test.nl.aov(allresid$Zresid,simulated_data_random$x1)
View(simulated_data_random)
fitted.values<-simulated_data_random$x
is.factor(fitted.values)
lpred.bin <- fitted.values
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
fitted.values<-as.numeric(fitted.values)
fitted.values
lpred.bin <- fitted.values
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
View(simulated_data_random)
fitted.values<-as.numeric(fitted.values)-1
fitted.values
lpred.bin <- fitted.values
Zresidual<-allresid$Zresid
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
fitted.values<-simulated_data_random$x2
!is.factor(fitted.values)
lpred.bin <- cut(fitted.values, k.anova)
k.anova=10
lpred.bin <- cut(fitted.values, k.anova)
less2_factor<-which(tapply(lpred.bin,lpred.bin,length)<= 2)
less2_factor
lpred.bin
rlang::is_empty(names(less2_factor))
if(rlang::is_empty(names(less2_factor))){
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
}else{
list_less2_factor<-list()
for(j in 1:length(less2_factor)){
list_less2_factor[[j]]<-which(lpred.bin==names(less2_factor[j]))
}
vector<-vector()
vector_less2_factor<-as.vector(sapply(list_less2_factor, append,vector))
new.lpred.bin<- lpred.bin[-vector_less2_factor]
new.Zresidual<-Zresidual[-vector_less2_factor]
anova(lm(new.Zresidual ~ new.lpred.bin))$`Pr(>F)`[1]
}
rlang::is_empty(names(less2_factor))
list_less2_factor<-list()
list_less2_factor
for(j in 1:length(less2_factor)){
list_less2_factor[[j]]<-which(lpred.bin==names(less2_factor[j]))
}
list_less2_factor
length(less2_factor)
vector<-vector()
vector_less2_factor<-as.vector(sapply(list_less2_factor, append,vector))
vector_less2_factor
vector<-vector()
vector_less2_factor<-as.vector(sapply(list_less2_factor, append,vector))
new.lpred.bin<- lpred.bin[-vector_less2_factor]
vector_less2_factor<-unlist(list_less2_factor, use.names = FALSE)
vector_less2_factor
new.lpred.bin<- lpred.bin[-vector_less2_factor]
new.lpred.bin
new.Zresidual<-Zresidual[-vector_less2_factor]
anova(lm(new.Zresidual ~ new.lpred.bin))$`Pr(>F)`[1]
test.nl.aov(allresid$Zresid,simulated_data_random$x)
test.nl.aov(allresid$Zresid,simulated_data_random$x2)
test.nl.aov <- function(Zresidual, fitted.values, k.anova=10)
{
if(is.factor(fitted.values)){
fitted.values<-as.numeric(fitted.values)-1
lpred.bin <- fitted.values
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
}
if(!is.factor(fitted.values)){
lpred.bin <- cut(fitted.values, k.anova)
less2_factor<-which(tapply(lpred.bin,lpred.bin,length)<= 2)
if(rlang::is_empty(names(less2_factor))){
anova(lm(Zresidual ~ lpred.bin))$`Pr(>F)`[1]
}else{
list_less2_factor<-list()
for(j in 1:length(less2_factor)){
list_less2_factor[[j]]<-which(lpred.bin==names(less2_factor[j]))
}
vector_less2_factor<-unlist(list_less2_factor, use.names = FALSE)
new.lpred.bin<- lpred.bin[-vector_less2_factor]
new.Zresidual<-Zresidual[-vector_less2_factor]
anova(lm(new.Zresidual ~ new.lpred.bin))$`Pr(>F)`[1]
}
}
}
test.nl.aov(allresid$Zresid,simulated_data_random$x2)
test.nl.aov(allresid$Zresid,simulated_data_random$x)
test.var.bartl <- function(Zresidual, fitted.values, k.bl=10)
{
if(is.factor(fitted.values)){
lpred.bin <- fitted.values
Z_group<- split(Zresidual, lpred.bin)
bartlett.test(Z_group)[["p.value"]]
}
if(!is.factor(fitted.values)){
lpred.bin <- cut(fitted.values, k.bl)
Z_group<- split(Zresidual, lpred.bin)
check_Z_group<-rep(k.bl)
for(i in 1:k.bl)
{
fun<-function(x) x>2
check_Z_group[i]<-fun(length(Z_group[[i]]))
}
if(all(check_Z_group!=0))
{
bartlett.test(Z_group)[["p.value"]]
}else{
Z_group<-Z_group[-which(check_Z_group==0)]
bartlett.test(Z_group)[["p.value"]]
}
}
}
test.var.bartl(allresid$Zresid,simulated_data_random$x)
test.var.bartl(allresid$Zresid,simulated_data_random$x2)
test.var.bartl(allresid$Zresid,simulated_data_random$x)
Zresidual<-allresid$Zresid
fitted.values<-simulated_data_random$x
k.bl=10
is.factor(fitted.values)
lpred.bin <- fitted.values
Z_group<- split(Zresidual, lpred.bin)
bartlett.test(Z_group)[["p.value"]]
Z_group
!is.factor(fitted.values)
fitted.values<-simulated_data_random$x2
!is.factor(fitted.values)
lpred.bin <- cut(fitted.values, k.bl)
Z_group<- split(Zresidual, lpred.bin)
Z_group
check_Z_group<-rep(k.bl)
for(i in 1:k.bl)
{
fun<-function(x) x>2
check_Z_group[i]<-fun(length(Z_group[[i]]))
}
check_Z_group
all(check_Z_group!=0)
if(all(check_Z_group!=0))
{
bartlett.test(Z_group)[["p.value"]]
}else{
Z_group<-Z_group[-which(check_Z_group==0)]
bartlett.test(Z_group)[["p.value"]]
}
test.var.bartl(allresid$Zresid,simulated_data_random$x2)
test.var.bartl(allresid$Zresid,simulated_data_random$x)
test.var.bartl(allresid$Zresid,simulated_data_random$x)
fitted.values<-simulated_data_random$x
is.factor(fitted.values)
lpred.bin <- fitted.values
Z_group<- split(Zresidual, lpred.bin)
bartlett.test(Z_group)[["p.value"]]
test.var.bartl <- function(Zresidual, fitted.values, k.bl=10)
{
if(is.factor(fitted.values)){
lpred.bin <- fitted.values
Z_group<- split(Zresidual, lpred.bin)
bartlett.test(Z_group)[["p.value"]]
}
if(!is.factor(fitted.values)){
lpred.bin <- cut(fitted.values, k.bl)
Z_group<- split(Zresidual, lpred.bin)
check_Z_group<-rep(k.bl)
for(i in 1:k.bl)
{
fun<-function(x) x>2
check_Z_group[i]<-fun(length(Z_group[[i]]))
}
if(all(check_Z_group!=0)){
bartlett.test(Z_group)[["p.value"]]
}else{
Z_group<-Z_group[-which(check_Z_group==0)]
bartlett.test(Z_group)[["p.value"]]
}
}
}
test.var.bartl(allresid$Zresid,simulated_data_random$x)
test.var.bartl <- function(Zresidual, fitted.values, k.bl=10)
{
if(is.factor(fitted.values)){
lpred.bin <- fitted.values
Z_group<- split(Zresidual, lpred.bin)
bartlett.test(Z_group)[["p.value"]]
}
if(!is.factor(fitted.values)){
lpred.bin <- cut(fitted.values, k.bl)
Z_group<- split(Zresidual, lpred.bin)
check_Z_group<-rep(k.bl)
for(i in 1:k.bl)
{
fun<-function(x) x>2
check_Z_group[i]<-fun(length(Z_group[[i]]))
}
if(all(check_Z_group!=0)){
bartlett.test(Z_group)[["p.value"]]
}else{
Z_group<-Z_group[-which(check_Z_group==0)]
bartlett.test(Z_group)[["p.value"]]
}
}
bartlett.test(Z_group)[["p.value"]]
}
test.var.bartl(allresid$Zresid,simulated_data_random$x)
test.var.bartl(allresid$Zresid,simulated_data_random$x2)
test.var.bartl <- function(Zresidual, fitted.values, k.bl=10)
{
if(is.factor(fitted.values)){
lpred.bin <- fitted.values
Z_group<- split(Zresidual, lpred.bin)
bl.test<-bartlett.test(Z_group)[["p.value"]]
}
if(!is.factor(fitted.values)){
lpred.bin <- cut(fitted.values, k.bl)
Z_group<- split(Zresidual, lpred.bin)
check_Z_group<-rep(k.bl)
for(i in 1:k.bl)
{
fun<-function(x) x>2
check_Z_group[i]<-fun(length(Z_group[[i]]))
}
if(all(check_Z_group!=0)){
bl.test<-bartlett.test(Z_group)[["p.value"]]
}else{
Z_group<-Z_group[-which(check_Z_group==0)]
bl.test<-bartlett.test(Z_group)[["p.value"]]
}
}
bl.test
}
test.var.bartl(allresid$Zresid,simulated_data_random$x2)
test.var.bartl(allresid$Zresid,simulated_data_random$x)
library(Zresidual)
anov.test.zresid(allresid$Zresid,simulated_data_random$x)
anov.test.zresid(allresid$Zresid,simulated_data_random$x2)
bartlett.test.zresid(allresid$Zresid,simulated_data_random$x2)
bartlett.test.zresid(allresid$Zresid,simulated_data_random$x)
boxplot.zresid(allresid$Zresid,simulated_data_random$x2)
library(Zresidual)
boxplot.zresid(allresid$Zresid,simulated_data_random$x2)
library(Zresidual)
boxplot.zresid(allresid$Zresid,simulated_data_random$x2)
boxplot.zresid(allresid$Zresid,simulated_data_random$x)
library(Zresidual)
boxplot.zresid(allresid$Zresid,simulated_data_random$x)
fitted.values<-simulated_data_random$x
is.factor(fitted.values)
fitted.values<-as.numeric(fitted.values)
bin<-fitted.values
bin
bin<-levels(fitted.values)
bin
fitted.values
fitted.values<-simulated_data_random$x
bin<-levels(fitted.values)
bin
plot(bin, Zresidual, ylab = "Z-Residual",
ylim = c(-ylim0,ylim0)
)
bin<-as.numeric(bin)
bin
plot(bin, Zresidual, ylab = "Z-Residual",
ylim = c(-ylim0,ylim0)
)
bin<-levels(fitted.values)
bin
Zresidual<-allresid$Zresid
plot(bin, Zresidual, ylab = "Z-Residual",
ylim = c(-ylim0,ylim0)
)
plot(bin, allresid$Zresid)
bin<-fitted.values
plot(bin, allresid$Zresid)
fitted.values<-simulated_data_random$x2
num.bin=10
bin<-cut(fitted.values,num.bin)
plot(bin, Zresidual, ylab = "Z-Residual",
ylim = c(-ylim0,ylim0)
)
plot(bin, allresid$Zresid)
library(Zresidual)
boxplot.zresid(allresid$Zresid,simulated_data_random$x)
boxplot.zresid(allresid$Zresid,simulated_data_random$x2)
load("/Users/WTX/Desktop/Rout_n200/data_n200.1.RData")
View(data_n200)
library(Zresidual)
data(kidney)
head(kidney)
data("drs")
head(drs)
View(drs)
data("LeukSurv")
head(LeukSurv)
library(Zresidual)
library(Zresidual)
data(kidney)
head(kidney)
kidney$sex <- ifelse(kidney$sex == 1, "male", "female")
kidney$id<-as.factor(kidney$id)
View(kidney)
#############fit the coxph model with frailty#################
fit_kidney <- tryCatch(
coxph(Surv(time, status) ~ age + sex + disease+
frailty(id, distribution="gamma"), data= kidney),
error = function(e) NA,
warning = function(w) NA
)
coxph(Surv(time, status) ~ age + sex + disease+
frailty(id, distribution="gamma"), data= kidney)
library(survival)
library(Zresidual)
#############fit the coxph model with frailty#################
fit_kidney <- tryCatch(
coxph(Surv(time, status) ~ age + sex + disease+
frailty(id, distribution="gamma"), data= kidney),
error = function(e) NA,
warning = function(w) NA
)
