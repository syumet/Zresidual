{
y<- coxfit_fit$y
m <- nrow (y)
mre <- resid(coxfit_fit, type="martingale")
dre <- resid(coxfit_fit, type="deviance")
#Unmodified Cox-Snell residual
ucs <- as.data.frame(as.matrix(y))[,-1] - mre
#Survival Function
SP<- exp(-ucs)
censored <- which(as.data.frame(as.matrix(y))[,-1]==0)
n.censored <- length(censored)
#NMSP residual (normal-transformed modified survival prob)
MSP<- SP
MSP[censored] <- SP[censored]/exp(1)
mcs <- -log(MSP)
nmsp<- qnorm(MSP)
# Z-residual
RSP <- SP
RSP[censored] <- RSP[censored]*runif(n.censored)
Zresid <- -qnorm(RSP)
Zresid.sw.pvalue<-shapiro.test(Zresid)$p.value
list(Zresid=Zresid,RSP=RSP,Zresid.sw.pvalue=Zresid.sw.pvalue,
ucs=ucs,mcs=mcs)
}
# outputs:
## RSP --- Randomized Survival Probabilities
## Zresid --- Z-residual
## Zresid.sw.pvalue --- GOF test p-values by applying SW test to Z-residual
## ucs --- unmodified CS residuals
## mcs --- modified CS residuals
## martg --- Martingale residuals
## dev --- Deviance residuals
## haz_fn --- hazard function of cs residuals
# Required packages:
if (!requireNamespace("pacman")) {
install.packages("pacman")
}
pacman::p_load(
"foreach",
"parallel",
"doParallel",
"stringr"
)
mf <- model.frame(fit$formula, data)
mf <- model.frame(fit2$formula, data)
mf <- model.frame(fit2$formula, simulated_data_random)
View(mf)
nc <- ncol (mf)
fix_var<-mf[,-1,drop=FALSE]
fix_var
if(is.null(nfolds))
{
ncores <- detectCores()
cl <- makeForkCluster(ncores)
registerDoParallel(cl)
nfolds<-10 %/% ncores*ncores
}
nfolds=NULL
if(is.null(nfolds))
{
ncores <- detectCores()
cl <- makeForkCluster(ncores)
registerDoParallel(cl)
nfolds<-10 %/% ncores*ncores
}
if(is.null(foldlist)) foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
foldlist=NULL
kfold_fn<-function (y, k, list = TRUE, returnTrain = FALSE)
{
if (class(y)[1] == "Surv")
y <- y[, "time"]
if (is.numeric(y)) y<-as.factor(y)
# {
#   cuts <- floor(length(y)/k)
#   if (cuts < 2)
#     cuts <- 2
#   if (cuts > 5)
#     cuts <- 5
#   breaks <- unique(quantile(y, probs = seq(0, 1, length = cuts)))
#   y <- cut(y, breaks, include.lowest = TRUE)
# }
if (k < length(y)) {
y <- factor(as.character(y))
numInClass <- table(y)
foldVector <- vector(mode = "integer", length(y))
for (i in 1:length(numInClass)) {
min_reps <- numInClass[i]%/%k
if (min_reps > 0) {
spares <- numInClass[i]%%k
seqVector <- rep(1:k, min_reps)
if (spares > 0)
seqVector <- c(seqVector, sample(1:k, spares))
foldVector[which(y == names(numInClass)[i])] <- sample(seqVector)
}
else {
foldVector[which(y == names(numInClass)[i])] <-
sample(1:k,size = numInClass[i])
}
}
fold_num<-length(table(foldVector))
if (fold_num !=k){
subsets <- replicate(1,sample(length(y)))
fold <- rep(seq_len(k), length.out = length(y))
foldVector<-fold[order(subsets)]
}
}
else foldVector <- seq(along = y)
if (list) {
out <- split(seq(along = y), foldVector)
names(out) <- paste("Fold", gsub(" ", "0", format(seq(along = out))),
sep = "")
if (returnTrain)
out <- lapply(out, function(data, y) y[-data], y = seq(along = y))
}
else out <- foldVector
out
}
make_fold<-function(fix_var,y,k,censor)
{
########Find out which column is factor data
col<-as.logical(rep(0,ncol(fix_var)))
for(i in 1:ncol(fix_var)){
col[i]<-is.factor(fix_var[,i])
}
categ_col<-which(col==TRUE)
#######combine fix variable and censor column#####
fix_censor<-data.frame(fix_var,censor)
fix_censor_col<-ncol(fix_censor)
#####make a fold list
if(length(categ_col)==0) fold_list<-kfold_fn(y,k)
if(length(categ_col)!=0){
counter <- 0
allfoldisgood<-FALSE
while(isFALSE(allfoldisgood)){
fold_list<-kfold_fn(y,k)
k2<-length(fold_list)
if(k2 != k) warning(paste("It cannot get", k, "folds,the fold number is",k2))
test_data <- as.list(1:k2)
train_data<- as.list(1:k2)
foldisgood<-matrix(FALSE,nrow =length(categ_col),ncol =k2)
train_data_censor<-as.list(1:k2)
check_table<-matrix(FALSE,nrow =length(categ_col),ncol =k2)
for(i in 1:length(categ_col)){
for(fid in 1:length (fold_list)) {
#check factor column in test data within train data
test_data[[fid]] <- fix_var[fold_list[[fid]], ,drop=FALSE]
train_data[[fid]]<- fix_var[-fold_list[[fid]], ,drop=FALSE]
foldisgood[i,fid]<- all(test_data[[fid]][,categ_col[i]]%in%
train_data[[fid]][,categ_col[i]])
#check cross table contain zero or not in r (factor cross with censor)
train_data_censor[[fid]] <- fix_censor[-fold_list[[fid]], ,drop=FALSE]
check_table[i,fid]<-all(apply(table(train_data_censor[[fid]][,categ_col[i]],
train_data_censor[[fid]][,fix_censor_col]),
2,function(x) x!=0))
}
}
allfoldisgood<-all(foldisgood,check_table)
counter <- counter+1
if (counter>500) stop("It cannot get the fold list ")
}
}
fold_list
}
fix_var=fix_var
y=mf[,1]
k=nfolds
censor=mf[,1][,2]
censor
foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
foldlist
res_fold <- as.list(1:nfolds)
for(fid in 1:length (foldlist))
{
testcases <- foldlist[[fid]]
data.train <- data[-testcases, ]
data.test <- data[testcases, ]
fit_traindata <- tryCatch(
coxph(fit$formula,data=data.train),
error = function(e) NA,
warning = function(w) NA)
if(any(is.na(fit_traindata))) {
res_fold[[fid]]<-rep(NA,length(foldlist[[fid]]))
}
if(any(!is.na(fit_traindata))){
res_fold[[fid]]<-Zresidual.coxph(fit_coxph=fit_traindata,
newdata = data.test)
}
}
data<-out_r$data_form
res_fold <- as.list(1:nfolds)
for(fid in 1:length (foldlist))
{
testcases <- foldlist[[fid]]
data.train <- data[-testcases, ]
data.test <- data[testcases, ]
fit_traindata <- tryCatch(
coxph(fit$formula,data=data.train),
error = function(e) NA,
warning = function(w) NA)
if(any(is.na(fit_traindata))) {
res_fold[[fid]]<-rep(NA,length(foldlist[[fid]]))
}
if(any(!is.na(fit_traindata))){
res_fold[[fid]]<-Zresidual.coxph(fit_coxph=fit_traindata,
newdata = data.test)
}
}
cv_Zresid<-cv_censored.Zresid<-cv_SP<-cv_ucs<-cv_mcs<-cv_martg<-cv_dev<-rep (0, nrow(data))
for(fid in 1:length (foldlist)) {
testcases <- foldlist[[fid]]
cv_Zresid[testcases]<-res_fold[[fid]]$Zresid
cv_censored.Zresid[testcases]<-res_fold[[fid]]$censored.Zresid
cv_SP[testcases]<-res_fold[[fid]]$SP
cv_ucs[testcases]<-res_fold[[fid]]$ucs
cv_mcs[testcases]<-res_fold[[fid]]$mcs
cv_martg[testcases]<-res_fold[[fid]]$martg
cv_dev[testcases]<-res_fold[[fid]]$dev
}
cv_Zresid<-cv_censored.Zresid<-cv_SP<-cv_ucs<-cv_mcs<-cv_martg<-cv_dev<-rep (0, nrow(data))
for(fid in 1:length (foldlist)) {
testcases <- foldlist[[fid]]
cv_Zresid[testcases]<-res_fold[[fid]]$Zresid
cv_censored.Zresid[testcases]<-res_fold[[fid]]$censored.Zresid
cv_SP[testcases]<-res_fold[[fid]]$SP
cv_ucs[testcases]<-res_fold[[fid]]$ucs
cv_mcs[testcases]<-res_fold[[fid]]$mcs
cv_martg[testcases]<-res_fold[[fid]]$martg
cv_dev[testcases]<-res_fold[[fid]]$dev
}
res_fold <- as.list(1:nfolds)
for(fid in 1:length (foldlist))
{
testcases <- foldlist[[fid]]
data.train <- data[-testcases, ]
data.test <- data[testcases, ]
fit_traindata <- tryCatch(
coxph(fit$formula,data=data.train),
error = function(e) NA,
warning = function(w) NA)
if(any(is.na(fit_traindata))) {
res_fold[[fid]]<-rep(NA,length(foldlist[[fid]]))
}
if(any(!is.na(fit_traindata))){
res_fold[[fid]]<-Zresidual.coxph(fit_coxph=fit_traindata,
newdata = data.test)
}
}
res_fold
# Required packages:
if (!requireNamespace("pacman")) {
install.packages("pacman")
}
pacman::p_load(
"foreach",
"parallel",
"doParallel",
"stringr"
)
mf <- model.frame(fit$formula, data)
set.seed(1)
rexp2 <- function(n, rate){ if (rate==0) rep(Inf,n) else rexp(n=n, rate = rate)}
simulated_data<- function(n,beta0 , beta1 ,beta2, alpha, mean.censor)
{
x <- rbinom(n, size = 1, p = 0.5)
x2<- rnorm(n,0,1)
t0<- rexp2(n, rate= 1/mean.censor)
survreg_sim_data <- rsurvreg( n, mean = beta0 + beta1 * x +beta2*x2 ,
scale=1/alpha, distribution='weibull')
t <- pmin(survreg_sim_data, t0)
d <- as.numeric(t0>= survreg_sim_data )
x<-as.factor(x)
data_form<- data.frame(survreg_sim_data,t0,t,d,x,x2)
out_r<-list(data_form=data_form, alpha=alpha, beta0=beta0, beta1=beta1,beta2=beta2)
return (out_r)
}
library("foreach")
library("survival")
n<-50
beta0<-2
beta1<-1
beta2<-2
alpha<-1.7
mean.censor<-14
#nrep is preset to a number
# simulating a dataset
out_r<- simulated_data(n=n,beta0=beta0,beta1=beta1,beta2 = beta2,
alpha=alpha, mean.censor=mean.censor)
data<-out_r$data_form
#checking censoring rate
table(simulated_data_random$d)
fit<-coxph(Surv(t,d) ~ x+x2, data=simulated_data_random)
# Required packages:
if (!requireNamespace("pacman")) {
install.packages("pacman")
}
pacman::p_load(
"foreach",
"parallel",
"doParallel",
"stringr"
)
mf <- model.frame(fit$formula, data)
nc <- ncol (mf)
fix_var<-mf[,-1,drop=FALSE]
if(is.null(nfolds))
{
ncores <- detectCores()
cl <- makeForkCluster(ncores)
registerDoParallel(cl)
nfolds<-10 %/% ncores*ncores
}
if(is.null(foldlist)) foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
res_fold <- as.list(1:nfolds)
for(fid in 1:length (foldlist))
{
testcases <- foldlist[[fid]]
data.train <- data[-testcases, ]
data.test <- data[testcases, ]
fit_traindata <- tryCatch(
coxph(fit$formula,data=data.train),
error = function(e) NA,
warning = function(w) NA)
if(any(is.na(fit_traindata))) {
res_fold[[fid]]<-rep(NA,length(foldlist[[fid]]))
}
if(any(!is.na(fit_traindata))){
res_fold[[fid]]<-Zresidual.coxph(fit_coxph=fit_traindata,
newdata = data.test)
}
}
cv_Zresid<-cv_censored.Zresid<-cv_SP<-cv_ucs<-cv_mcs<-cv_martg<-cv_dev<-rep (0, nrow(data))
for(fid in 1:length (foldlist)) {
testcases <- foldlist[[fid]]
cv_Zresid[testcases]<-res_fold[[fid]]$Zresid
cv_censored.Zresid[testcases]<-res_fold[[fid]]$censored.Zresid
cv_SP[testcases]<-res_fold[[fid]]$SP
cv_ucs[testcases]<-res_fold[[fid]]$ucs
cv_mcs[testcases]<-res_fold[[fid]]$mcs
cv_martg[testcases]<-res_fold[[fid]]$martg
cv_dev[testcases]<-res_fold[[fid]]$dev
}
list(cv_Zresid=cv_Zresid,cv_censored.Zresid=cv_censored.Zresid,cv_SP=cv_SP,
cv_ucs=cv_ucs,cv_mcs=cv_mcs,cv_martg=cv_martg,cv_dev=cv_dev)
cv.zresidual.coxph<- function(fit, data, nfolds=NULL,foldlist=NULL)
{
# Required packages:
if (!requireNamespace("pacman")) {
install.packages("pacman")
}
pacman::p_load(
"foreach",
"parallel",
"doParallel",
"stringr"
)
mf <- model.frame(fit$formula, data)
nc <- ncol (mf)
fix_var<-mf[,-1,drop=FALSE]
if(is.null(nfolds))
{
ncores <- detectCores()
cl <- makeForkCluster(ncores)
registerDoParallel(cl)
nfolds<-10 %/% ncores*ncores
}
if(is.null(foldlist)) foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
res_fold <- as.list(1:nfolds)
for(fid in 1:length (foldlist))
{
testcases <- foldlist[[fid]]
data.train <- data[-testcases, ]
data.test <- data[testcases, ]
fit_traindata <- tryCatch(
coxph(fit$formula,data=data.train),
error = function(e) NA,
warning = function(w) NA)
if(any(is.na(fit_traindata))) {
res_fold[[fid]]<-rep(NA,length(foldlist[[fid]]))
}
if(any(!is.na(fit_traindata))){
res_fold[[fid]]<-Zresidual.coxph(fit_coxph=fit_traindata,
newdata = data.test)
}
}
cv_Zresid<-cv_censored.Zresid<-cv_SP<-cv_ucs<-cv_mcs<-cv_martg<-cv_dev<-rep (0, nrow(data))
for(fid in 1:length (foldlist)) {
testcases <- foldlist[[fid]]
cv_Zresid[testcases]<-res_fold[[fid]]$Zresid
cv_censored.Zresid[testcases]<-res_fold[[fid]]$censored.Zresid
cv_SP[testcases]<-res_fold[[fid]]$SP
cv_ucs[testcases]<-res_fold[[fid]]$ucs
cv_mcs[testcases]<-res_fold[[fid]]$mcs
cv_martg[testcases]<-res_fold[[fid]]$martg
cv_dev[testcases]<-res_fold[[fid]]$dev
}
list(cv_Zresid=cv_Zresid,cv_censored.Zresid=cv_censored.Zresid,cv_SP=cv_SP,
cv_ucs=cv_ucs,cv_mcs=cv_mcs,cv_martg=cv_martg,cv_dev=cv_dev)
}
cv.zresidual.coxph(fit,data,nfolds=5)
cv.zresidual.coxph(fit,data,nfolds=5)
cv.zresidual.coxph(fit,data,nfolds=5)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds=5)
cv.zresidual.coxph(fit=fit,data=simulated_data_random)
''
''
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 3)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 10)
''
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 6)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 7)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 8)
''
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 9)
''
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 11)
''
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds = 15)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds =50)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds =4)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds =2)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds =2)
cv.zresidual.coxph(fit=fit,data=simulated_data_random,nfolds =4)
fit
data
nfolds=10
# Required packages:
if (!requireNamespace("pacman")) {
install.packages("pacman")
}
pacman::p_load(
"foreach",
"parallel",
"doParallel",
"stringr"
)
mf <- model.frame(fit$formula, data)
nc <- ncol (mf)
fix_var<-mf[,-1,drop=FALSE]
foldlist=NULL
if(is.null(foldlist)) foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
foldlist
res_fold <- as.list(1:nfolds)
for(fid in 1:length (foldlist))
{
testcases <- foldlist[[fid]]
data.train <- data[-testcases, ]
data.test <- data[testcases, ]
fit_traindata <- tryCatch(
coxph(fit$formula,data=data.train),
error = function(e) NA,
warning = function(w) NA)
if(any(is.na(fit_traindata))) {
res_fold[[fid]]<-rep(NA,length(foldlist[[fid]]))
}
if(any(!is.na(fit_traindata))){
res_fold[[fid]]<-Zresidual.coxph(fit_coxph=fit_traindata,
newdata = data.test)
}
}
cv_Zresid<-cv_censored.Zresid<-cv_SP<-cv_ucs<-cv_mcs<-cv_martg<-cv_dev<-rep (0, nrow(data))
for(fid in 1:length (foldlist)) {
testcases <- foldlist[[fid]]
cv_Zresid[testcases]<-res_fold[[fid]]$Zresid
cv_censored.Zresid[testcases]<-res_fold[[fid]]$censored.Zresid
cv_SP[testcases]<-res_fold[[fid]]$SP
cv_ucs[testcases]<-res_fold[[fid]]$ucs
cv_mcs[testcases]<-res_fold[[fid]]$mcs
cv_martg[testcases]<-res_fold[[fid]]$martg
cv_dev[testcases]<-res_fold[[fid]]$dev
}
list(cv_Zresid=cv_Zresid,cv_censored.Zresid=cv_censored.Zresid,cv_SP=cv_SP,
cv_ucs=cv_ucs,cv_mcs=cv_mcs,cv_martg=cv_martg,cv_dev=cv_dev)
cv.zresidual.coxph(fit,data,nfolds = 10)
cv.zresidual.coxph(fit,data,nfolds = 10)
cv.zresidual.coxph(fit,data,nfolds = 10)
cv.zresidual.coxph(fit,data,nfolds = 10)
cv.zresidual.coxph(fit,data,nfolds = 10)
cv.zresidual.coxph(fit,data,nfolds = 50)
cv.zresidual.coxph(fit,data,nfolds = 50)
nfolds=50
# Required packages:
if (!requireNamespace("pacman")) {
install.packages("pacman")
}
pacman::p_load(
"foreach",
"parallel",
"doParallel",
"stringr"
)
mf <- model.frame(fit$formula, data)
nc <- ncol (mf)
fix_var<-mf[,-1,drop=FALSE]
if(is.null(nfolds))
{
ncores <- detectCores()
cl <- makeForkCluster(ncores)
registerDoParallel(cl)
nfolds<-10 %/% ncores*ncores
}
if(is.null(foldlist)) foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
foldlist
nfolds
if(is.null(foldlist)) foldlist<-make_fold(fix_var=fix_var,y=mf[,1],
k=nfolds,censor=mf[,1][,2])
foldlist
